rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for 'ideas' collection
    match /ideas/{ideaId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Rules for 'ideasVotes' collection
    match /ideasVotes/{voteId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && voteId == request.auth.uid + '_' + request.resource.data.ideaId;
    }

    // Rules for the 'evaluations' collection
    match /evaluations/{evaluationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && evaluationId == request.auth.uid + '_' + request.resource.data.ideaId;
        allow update, delete: if false;
    }

    // Rules for the 'comments' collection
    match /comments/{commentId} {
      // Any authenticated user can read comments.
      allow read: if request.auth != null;

      // An authenticated user can create a comment if the data is valid.
      allow create: if request.auth != null
                      // 1. Author must be the logged-in user.
                      && request.resource.data.userId == request.auth.uid
                      // 2. All required fields must exist and have the correct format.
                      && request.resource.data.ideaId is string
                      && request.resource.data.text is string && request.resource.data.text.size() > 0 && request.resource.data.text.size() < 2000
                      && request.resource.data.displayName is string && request.resource.data.displayName.size() > 0
                      && request.resource.data.createdAt is timestamp
                      && request.resource.data.likes == []
                      && (request.resource.data.parentId is string || request.resource.data.parentId == null)
                      // 3. Ensure no unexpected fields are being added.
                      && request.resource.data.keys().hasAll(['ideaId', 'userId', 'displayName', 'text', 'createdAt', 'likes', 'parentId']);


      // An authenticated user can update a comment only to like/unlike it.
      allow update: if request.auth != null
                      // The only field that can change is the 'likes' array.
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
                      // Ensure the change is either adding or removing the current user's UID from the likes array.
                      && (
                        // Liking: The new 'likes' array is the old one plus the user's UID.
                        request.resource.data.likes == resource.data.likes.concat([request.auth.uid]) ||
                        // Unliking: The old 'likes' array is the new one plus the user's UID.
                        resource.data.likes == request.resource.data.likes.concat([request.auth.uid])
                      );

      // A user can delete their own comment.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // *** NEW: Rules for the 'playerTaggings' collection ***
    // Only authenticated users can create tagging records.
    // Read access for all authenticated users to allow displaying tagged players.
    // No update or delete operations allowed for clients.
    match /playerTaggings/{taggingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // *** NEW: Rules for the 'inviteList' collection ***
    // Authenticated users need to read this for @mention suggestions.
    // No write access for clients as it's assumed to be managed by an admin.
    match /inviteList/{documentId} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // *** UPDATED: Rules for the 'players' collection ***
    match /players/{userId} {
      // Any authenticated user can read player data for the ranking page.
      allow read: if request.auth != null;
      // Users can only create their own player document.
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      // Users can only update their own player document.
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // CORRECTED Rule for allowedEmailSuffixes collection
    match /allowedEmailSuffixes/{suffix} {
        allow read: if true;
        allow write: if false;
    }

    // SECURE Rules for Logging Collections
    match /successfulLogins/{logId} {
      allow read, update, delete: if false;
      allow create: if
        request.auth != null &&
        request.resource.data.Email == request.auth.token.email &&
        request.resource.data.Time == request.time &&
        request.resource.data.DisplayName is string &&
        request.resource.data.browser is string &&
        request.resource.data.location is map &&
        request.resource.data.keys().hasOnly(['Time', 'Email', 'DisplayName', 'location', 'browser']);
    }

    match /failedLogins/{logId} {
      allow read, update, delete: if false;
      allow create: if
        request.resource.data.Time == request.time &&
        request.resource.data.Email is string && request.resource.data.Email.size() < 256 &&
        request.resource.data.browser is string && request.resource.data.browser.size() < 512 &&
        request.resource.data.location is map &&
        request.resource.data.loginError is string &&
        request.resource.data.keys().hasOnly(['Time', 'Email', 'location', 'browser', 'loginError']);
    }

    match /failedRegistrations/{logId} {
      allow read, update, delete: if false;
      allow create: if
        request.resource.data.Time == request.time &&
        request.resource.data.Email is string && request.resource.data.Email.size() < 256 &&
        request.resource.data.browser is string && request.resource.data.browser.size() < 512 &&
        request.resource.data.location is map &&
        request.resource.data.registrationError is string &&
        request.resource.data.keys().hasOnly(['Time', 'Email', 'location', 'browser', 'registrationError']);
    }
  }
}