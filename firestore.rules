rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for 'ideas' collection
    match /ideas/{ideaId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Rules for 'ideasVotes' collection
    match /ideasVotes/{voteId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && voteId == request.auth.uid + '_' + request.resource.data.ideaId;
    }

    // Rules for the 'evaluations' collection
    match /evaluations/{evaluationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && evaluationId == request.auth.uid + '_' + request.resource.data.ideaId;
        allow update, delete: if false;
    }

    // Rules for the 'players' collection
    match /players/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // CORRECTED Rule for allowedEmailSuffixes collection
    // This allows anyone to read, which is necessary for registration.
    match /allowedEmailSuffixes/{suffix} {
        allow read: if true;
        allow write: if false;
    }

    // SECURE Rules for Logging Collections
    match /successfulLogins/{logId} {
      allow read, update, delete: if false;
      allow create: if
        request.auth != null &&
        request.resource.data.Email == request.auth.token.email &&
        request.resource.data.Time == request.time &&
        request.resource.data.DisplayName is string &&
        request.resource.data.browser is string &&
        request.resource.data.location is map &&
        request.resource.data.keys().hasOnly(['Time', 'Email', 'DisplayName', 'location', 'browser']);
    }

    match /failedLogins/{logId} {
      allow read, update, delete: if false;
      allow create: if
        request.resource.data.Time == request.time &&
        request.resource.data.Email is string && request.resource.data.Email.size() < 256 &&
        request.resource.data.browser is string && request.resource.data.browser.size() < 512 &&
        request.resource.data.location is map &&
        request.resource.data.loginError is string &&
        request.resource.data.keys().hasOnly(['Time', 'Email', 'location', 'browser', 'loginError']);
    }

    match /failedRegistrations/{logId} {
      allow read, update, delete: if false;
      allow create: if
        request.resource.data.Time == request.time &&
        request.resource.data.Email is string && request.resource.data.Email.size() < 256 &&
        request.resource.data.browser is string && request.resource.data.browser.size() < 512 &&
        request.resource.data.location is map &&
        request.resource.data.registrationError is string &&
        request.resource.data.keys().hasOnly(['Time', 'Email', 'location', 'browser', 'registrationError']);
    }
  }
}