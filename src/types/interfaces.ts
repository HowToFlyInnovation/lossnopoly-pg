// src/types/interfaces.ts

import { Timestamp } from "firebase/firestore";

// Extend the existing Idea interface
export interface Idea {
  id?: string; // Optional if auto-generated by Firestore
  shortDescription: string;
  reasoning: string;
  impactScore: number;
  complexityScore: number;
  tags: string[]; // Existing field for general tags
  createdBy: string; // User ID of the creator
  createdAt: Timestamp;
  upvotes: string[]; // Array of user IDs who upvoted
  downvotes: string[]; // Array of user IDs who downvoted
  status: "pending" | "approved" | "rejected" | "implemented"; // Example status
  // New field for tagged users
  taggedUsers?: string[]; // Array of user UIDs tagged in the idea
}

// Extend the existing Comment interface
export interface Comment {
  id?: string; // Optional if auto-generated by Firestore
  ideaId: string; // ID of the idea this comment belongs to
  userId: string; // User ID of the commenter
  text: string;
  createdAt: Timestamp;
  // New field for tagged users
  taggedUsers?: string[]; // Array of user UIDs tagged in the comment
}

// New interface for Notifications
export interface Notification {
  id?: string; // Optional if auto-generated by Firestore
  recipientUserId: string; // UID of the user who needs to be notified
  senderUserId: string; // UID of the user who performed the action (e.g., created idea/comment)
  type: "idea_mention" | "comment_mention"; // Type of notification
  entityId: string; // ID of the idea or comment document
  read: boolean; // Has the user viewed this notification in-app?
  recapEmailSent: boolean; // Has this notification been included in a daily recap email?
  timestamp: Timestamp; // When the notification was created
  message: string; // A concise notification message
}

// Extend the existing Player interface if necessary (e.g., for notification preferences)
export interface Player {
  userId: string;
  email: string;
  displayName: string;
  profilePic: string;
  lastLogin: Timestamp;
  loginCount: number;
  createdAt: Timestamp;
  // Optional: User preference for daily recap emails
  receiveRecapEmails?: boolean;
}
